"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeVariantPricingLinkStep = exports.removeVariantPricingLinkStepId = void 0;
const modules_sdk_1 = require("@medusajs/modules-sdk");
const utils_1 = require("@medusajs/utils");
const workflows_sdk_1 = require("@medusajs/workflows-sdk");
exports.removeVariantPricingLinkStepId = "remove-variant-pricing-link";
exports.removeVariantPricingLinkStep = (0, workflows_sdk_1.createStep)(exports.removeVariantPricingLinkStepId, async (data, { container }) => {
    const remoteLink = container.resolve(utils_1.ContainerRegistrationKeys.REMOTE_LINK);
    const linkModule = remoteLink.getLinkModule(modules_sdk_1.Modules.PRODUCT, "variant_id", modules_sdk_1.Modules.PRICING, "price_set_id");
    const links = (await linkModule.list({
        variant_id: data.variant_ids,
    }, { select: ["id", "variant_id", "price_set_id"] }));
    await remoteLink.delete(links.map((link) => link.id));
    return new workflows_sdk_1.StepResponse(void 0, links);
}, async (prevData, { container }) => {
    if (!prevData?.length) {
        return;
    }
    const remoteLink = container.resolve(utils_1.ContainerRegistrationKeys.REMOTE_LINK);
    await remoteLink.create(prevData.map((entry) => ({
        [modules_sdk_1.Modules.PRODUCT]: {
            variant_id: entry.variant_id,
        },
        [modules_sdk_1.Modules.PRICING]: {
            price_set_id: entry.price_set_id,
        },
    })));
});
