"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.remapVariant = exports.remapProduct = exports.remapKeysForVariant = exports.remapKeysForProduct = void 0;
// The variant had prices before, but that is not part of the price_set money amounts. Do we remap the request and response or not?
var remapKeysForProduct = function (selectFields) {
    var productFields = selectFields.filter(function (fieldName) { return !fieldName.startsWith("variants.prices"); });
    var pricingFields = selectFields
        .filter(function (fieldName) { return fieldName.startsWith("variants.prices"); })
        .map(function (fieldName) {
        return fieldName.replace("variants.prices.", "variants.price_set.money_amounts.");
    });
    return __spreadArray(__spreadArray([], __read(productFields), false), __read(pricingFields), false);
};
exports.remapKeysForProduct = remapKeysForProduct;
var remapKeysForVariant = function (selectFields) {
    var variantFields = selectFields.filter(function (fieldName) { return !fieldName.startsWith("prices"); });
    var pricingFields = selectFields
        .filter(function (fieldName) { return fieldName.startsWith("prices"); })
        .map(function (fieldName) {
        return fieldName.replace("prices.", "price_set.money_amounts.");
    });
    return __spreadArray(__spreadArray([], __read(variantFields), false), __read(pricingFields), false);
};
exports.remapKeysForVariant = remapKeysForVariant;
var remapProduct = function (p) {
    var _a;
    return __assign(__assign({}, p), { variants: (_a = p.variants) === null || _a === void 0 ? void 0 : _a.map(exports.remapVariant) });
};
exports.remapProduct = remapProduct;
var remapVariant = function (v) {
    var _a, _b;
    return __assign(__assign({}, v), { prices: (_b = (_a = v.price_set) === null || _a === void 0 ? void 0 : _a.money_amounts) === null || _b === void 0 ? void 0 : _b.map(function (ma) { return (__assign(__assign({}, ma), { variant_id: v.id })); }), price_set: undefined });
};
exports.remapVariant = remapVariant;
//# sourceMappingURL=helpers.js.map