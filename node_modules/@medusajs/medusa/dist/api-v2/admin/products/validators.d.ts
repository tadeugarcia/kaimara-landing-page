import { OperatorMap } from "@medusajs/types";
import { ProductStatus } from "@medusajs/utils";
import { FindParams } from "../../../types/common";
export declare class AdminGetProductsProductParams extends FindParams {
}
export declare class AdminGetProductsProductVariantsVariantParams extends FindParams {
}
export declare class AdminGetProductsProductOptionsOptionParams extends FindParams {
}
declare const AdminGetProductsParams_base: import("../../..").ClassConstructor<FindParams & import("../../../types/common").FindPaginationParams>;
/**
 * Parameters used to filter and configure the pagination of the retrieved regions.
 */
export declare class AdminGetProductsParams extends AdminGetProductsParams_base {
    /**
     * Search term to search products' title, description, variants' title and sku, and collections' title.
     */
    q?: string;
    /**
     * IDs to filter products by.
     */
    id?: string | string[];
    /**
     * Statuses to filter products by.
     */
    status?: ProductStatus[];
    /**
     * Title to filter products by.
     */
    title?: string;
    /**
     * Handle to filter products by.
     */
    handle?: string;
    /**
     * Filter products by whether they're gift cards.
     */
    is_giftcard?: boolean;
    /**
     * Filter products by their associated price lists' ID.
     */
    price_list_id?: string[];
    /**
     * Filter products by their associated product collection's ID.
     */
    collection_id?: string[];
    /**
     * Filter products by their associated tags' value.
     */
    tags?: string[];
    /**
     * Filter products by their associated product type's ID.
     */
    type_id?: string[];
    variants?: Record<any, any>;
    created_at?: OperatorMap<string>;
    updated_at?: OperatorMap<string>;
    deleted_at?: OperatorMap<string>;
    $and?: AdminGetProductsParams[];
    $or?: AdminGetProductsParams[];
}
declare const AdminGetProductsVariantsParams_base: import("../../..").ClassConstructor<FindParams & import("../../../types/common").FindPaginationParams>;
export declare class AdminGetProductsVariantsParams extends AdminGetProductsVariantsParams_base {
    /**
     * Search term to search product variants' title, sku, and products' title.
     */
    q?: string;
    /**
     * IDs to filter product variants by.
     */
    id?: string | string[];
    /**
     * Filter product variants by whether their inventory is managed or not.
     */
    manage_inventory?: boolean;
    /**
     * Filter product variants by whether they are allowed to be backordered or not.
     */
    allow_backorder?: boolean;
    created_at?: OperatorMap<string>;
    updated_at?: OperatorMap<string>;
    deleted_at?: OperatorMap<string>;
    $and?: AdminGetProductsVariantsParams[];
    $or?: AdminGetProductsVariantsParams[];
}
declare const AdminGetProductsOptionsParams_base: import("../../..").ClassConstructor<FindParams & import("../../../types/common").FindPaginationParams>;
export declare class AdminGetProductsOptionsParams extends AdminGetProductsOptionsParams_base {
    title?: string;
    $and?: AdminGetProductsOptionsParams[];
    $or?: AdminGetProductsOptionsParams[];
}
export declare class AdminPostProductsReq {
    title: string;
    subtitle?: string;
    description?: string;
    is_giftcard: boolean;
    discountable: boolean;
    images?: string[];
    thumbnail?: string;
    handle?: string;
    status?: ProductStatus;
    type?: ProductTypeReq;
    collection_id?: string;
    tags?: ProductTagReq[];
    options?: AdminPostProductsProductOptionsReq[];
    variants?: AdminPostProductsProductVariantsReq[];
    weight?: number;
    length?: number;
    height?: number;
    width?: number;
    hs_code?: string;
    origin_country?: string;
    mid_code?: string;
    material?: string;
    metadata?: Record<string, unknown>;
}
export declare class AdminPostProductsProductReq {
    title?: string;
    subtitle?: string;
    description?: string;
    discountable?: boolean;
    images?: string[];
    thumbnail?: string;
    handle?: string;
    status?: ProductStatus;
    type?: ProductTypeReq;
    collection_id?: string;
    tags?: ProductTagReq[];
    variants?: ProductVariantReq[];
    weight?: number;
    length?: number;
    height?: number;
    width?: number;
    hs_code?: string;
    origin_country?: string;
    mid_code?: string;
    material?: string;
    metadata?: Record<string, unknown>;
}
export declare class AdminPostProductsProductVariantsReq {
    title: string;
    sku?: string;
    ean?: string;
    upc?: string;
    barcode?: string;
    hs_code?: string;
    mid_code?: string;
    inventory_quantity?: number;
    allow_backorder?: boolean;
    manage_inventory?: boolean;
    weight?: number;
    length?: number;
    height?: number;
    width?: number;
    origin_country?: string;
    material?: string;
    metadata?: Record<string, unknown>;
    prices: ProductVariantPricesCreateReq[];
    options?: Record<string, string>;
}
export declare class AdminPostProductsProductVariantsVariantReq {
    title?: string;
    sku?: string;
    ean?: string;
    upc?: string;
    barcode?: string;
    hs_code?: string;
    mid_code?: string;
    inventory_quantity?: number;
    allow_backorder?: boolean;
    manage_inventory?: boolean;
    weight?: number;
    length?: number;
    height?: number;
    width?: number;
    origin_country?: string;
    material?: string;
    metadata?: Record<string, unknown>;
    prices?: ProductVariantPricesUpdateReq[];
    options?: Record<string, string>;
}
export declare class AdminPostProductsProductOptionsReq {
    title: string;
    values: string[];
}
export declare class AdminPostProductsProductOptionsOptionReq {
    title: string;
    values: string[];
}
export declare class ProductVariantReq extends AdminPostProductsProductVariantsVariantReq {
    id: string;
}
export declare class ProductTagReq {
    id?: string;
    value: string;
}
/**
 * The details of a product type, used to create or update an existing product type.
 */
export declare class ProductTypeReq {
    /**
     * The ID of the product type. It's only required when referring to an existing product type.
     */
    id?: string;
    /**
     * The value of the product type.
     */
    value: string;
}
export declare class ProductVariantPricesCreateReq {
    currency_code: string;
    amount: number;
    min_quantity?: number;
    max_quantity?: number;
}
export declare class ProductVariantPricesUpdateReq {
    id?: string;
    currency_code?: string;
    amount: number;
    min_quantity?: number;
    max_quantity?: number;
}
export {};
